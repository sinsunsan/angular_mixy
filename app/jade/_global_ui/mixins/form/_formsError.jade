//- generic field level validation message
mixin errorMsgInvalid(config)
  //- config.msg the error message to display
  //- config.name the identifier of the field with the syntax formId.fieldId
  //- pristine = false > the user has already touched the input
  //- invalid = true >  One of the form validation has failed
  p(ng-show!="#{config.name}.$invalid && !#{config.name}.$pristine",
    class="help-block",
    translate)=config.msg

//- err is the angular error form error code
mixin errorMsgError(config)
  p(ng-show="#{config.name}.$error.#{config.err}",
    class="help-block",
    translate)=config.msg

//- Check the usage of the message type per field
mixin inputErrors(formId, fieldId, errors, stateId)
  - var formStateId = util.setFormStateId(formId, stateId);
  - var formfieldId = formId + '.' + fieldId;
  if (errors)
    if errors.invalid
      +errorMsgInvalid({name: formfieldId, msg: errors.invalid })
    if errors.maxLength
      +errorMsgError({name: formfieldId, msg: errors.maxLength, err: 'maxlength'})
    if errors.minLength
      +errorMsgError({name: formfieldId, msg: errors.minLength, err: 'minlength'})

//- Errors messages using the ngMessages directives
//- https://docs.angularjs.org/api/ngMessages
mixin errorNgMessages(formId, fieldId, errors)
  - console.log('\n\n the errors are ', errors);
  div(ng-messages="#{formId}.#{fieldId}.$error")
    each errorMessage, errorId in errors
      div(ng-message=errorId, class="mt1")=errorMessage