mixin fieldInputTag(form, field)
  //- if (field.id === 'phone') {
  //-  console.log('\n the field in the input mixin ' , field);
  //-  console.log('\n the field disabled state is ///////', field.disabled);
  //- }
  input(  type=field.type,
          name=field.id,
          id=field.id
          placeholder=field.placeholder,
          class='input-#{fieldId} #{form.inputsClass} #{field.inputsClass}',
          ng-model=field.ngModel,
          ng-minlength="2",
          ng-maxlength="50",
          ng-bind=field.id,
          required=field.required,
          translate,
          disabled=field.disabled)

//- Generic input field (types text, password, email...)
mixin fieldInput(formId, fieldId, stateId)
  - var field = util.setFieldDefaults(formId, fieldId, stateId);
  - var form = util.setFormDefaults(formId, stateId);
  - // The ng Model is automatically set if not defined
  - // and the attribute can be removed entirely if set to false (for fields that are read only (password Confirm...))
  - field.ngModel = util.setDefaultNgModel(field, form);
  - // console.log('the field input form ///', form);
  +fieldGroup(field)
    //- a field label
    if field.label.display
      //- side label to configure (don't work yet)
      label(for=field.id, class="col-xs-3")=field.placeholder
      div(class="col-xs-9")
        +fieldInputTag(form, field)
        if (form.ngMessages)
          +errorNgMessages(formId, fieldId, field.errors, stateId)
        else
          +inputErrors(formId, fieldId, field.errors, stateId)
    else
      +fieldInputTag(form, field)
      if (form.ngMessages)
        +errorNgMessages(formId, fieldId, field.errors, stateId)
      else
        +inputErrors(formId, fieldId, field.errors, stateId)

//- Generic button field (submit...)
mixin formButton(formId, fieldId, stateId)
  - var field = util.setFieldDefaults(formId, fieldId, stateId);
  - var form = util.setFormDefaults(formId, stateId);
  - var formStateId = util.setFormStateId(formId, stateId);
  - form.cssCommonClass = (util.checkNested(gData, 'forms', 'css', 'commonClass')) ? gData.forms.css.commonClass : '';
  - var ngDisabled = !(field.ngDisabled) ? field.ngDisabled : formStateId + ".$invalid";
  //- console.log('\nthe button field settings for ' + formId + '/' + fieldId + '/' + stateId + ' is \n', field, 'ngDisabled', ngDisabled);

  button( type="submit",
          class="btn-block btn btn-lg btn-default btn-primary button-#{fieldId} #{form.cssCommonClass} #{form.buttonsClass} #{field.class}",
          ng-disabled=ngDisabled,
          ng-click=field.ngClick,
          ng-bind=field.ngBind,
          translate)=field.label

//- https://github.com/sebastianha/angular-bootstrap-checkbox
//- ngTrueValue displayed text if the checkbox is checked
//- ngFalseValue displayed text if the checkbox is checked
mixin niceCheckbox(formId, fieldId, stateId)

  - var field = util.setFieldDefaults(formId, fieldId, stateId);
  - var form = util.setFormDefaults(formId, stateId);
  - if (field.id === 'makeAdmin') {
  -  console.log('\n the field in the input mixin ' , field);
  -  console.log('\n the field disabled state is ///////', field.disabled);
  - }
  - field.ngModel = util.setDefaultNgModel(field, form);
  +fieldGroup(field)
    checkbox(
      ng-model=field.ngModel,
      name=field.name,
      ng-true-value=field.ngTrueValue,
      ng-false-value=field.ngFalseValue,
      ng-change=field.ngChange,
    )
    span(class="ml0")=field.label

//- simple image uploader
mixin imageUploadWidget(field)
  if field
    input(  class="",
            type="file",
            name=field.id,
            accept="image/*",
            ng-file-select,
            ng-file-change=field.ngFileChange,
            ng-model=field.ngModel)=field.submit.label

//- Generic link
mixin link(link)
  if link
    - var translate = (link.translate) ? link.translate : true;
    a(
        href=link.href,
        ng-href=link.ngHref,
        ui-sref=link.uiSref,
        ng-click=link.ngClick,
        translate=translate
    )=link.text

